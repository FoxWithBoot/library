# Generated by Django 4.1.7 on 2023-04-03 11:54

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(help_text='Обязательное поле. Имя с заглавной буквы.', max_length=32, validators=[django.core.validators.RegexValidator(message='Должно начинаться с заглавной буквы.', regex='^[A-ZА-Я][a-zа-я]*$')], verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Обязательное поле. Фамилия с заглавной буквы.', max_length=32, validators=[django.core.validators.RegexValidator(message='Должно начинаться с заглавной буквы.', regex='^[A-ZА-Я][a-zа-я]*$')], verbose_name='Фамилия')),
                ('surname', models.CharField(blank=True, max_length=32, validators=[django.core.validators.RegexValidator(message='Должно начинаться с заглавной буквы.', regex='^[A-ZА-Я][a-zа-я]*$')], verbose_name='Отчество')),
                ('passport', models.CharField(error_messages={'unique': 'Пользователь с такими паспортными данными уже зарегистрирован.'}, help_text='Обязательное поле. Серия и номер паспорта или свидетельства о рождении.', max_length=32, unique=True, validators=[django.core.validators.RegexValidator(message='Не соответствует маске документа.', regex='^([I,V,X,L,M]+-[А-Я]{2})|(\\d{4}) \\d{6}$')], verbose_name='Паспорт')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с такой почтой уже зарегистрирован.'}, max_length=254, unique=True, verbose_name='email address')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Название')),
                ('author', models.CharField(max_length=32, verbose_name='Автор(-ы)')),
                ('publication_year', models.PositiveIntegerField(verbose_name='Год издания')),
                ('pages', models.PositiveIntegerField(verbose_name='Количество страниц')),
                ('price', models.FloatField(verbose_name='Стоимость')),
                ('method', models.PositiveIntegerField(choices=[(1, 'читальный зал'), (2, 'на руки')], default=1, verbose_name='Способ выдачи')),
                ('count', models.PositiveIntegerField(default=1, verbose_name='Количество экземпляров')),
                ('receipt_date', models.DateField(default=datetime.date.today, verbose_name='Дата поступления')),
            ],
            options={
                'verbose_name': 'Книга',
                'verbose_name_plural': 'Книги',
                'ordering': ['-receipt_date'],
            },
        ),
        migrations.CreateModel(
            name='Heading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=32, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Рубрика',
                'verbose_name_plural': 'Рубрики',
            },
        ),
        migrations.CreateModel(
            name='PublishPlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=32, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Место издания',
                'verbose_name_plural': 'Места издания',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=32, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тип книги',
                'verbose_name_plural': 'Типы книг',
            },
        ),
        migrations.CreateModel(
            name='BookManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_date', models.DateField(default=datetime.date.today)),
                ('return_date', models.DateField(blank=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lib_manager.book')),
                ('reader', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='heading',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lib_manager.heading', verbose_name='Рубрика'),
        ),
        migrations.AddField(
            model_name='book',
            name='publication_place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lib_manager.publishplace', verbose_name='Место издания'),
        ),
        migrations.AddField(
            model_name='book',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lib_manager.type', verbose_name='Тип'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='books',
            field=models.ManyToManyField(blank=True, through='lib_manager.BookManager', to='lib_manager.book'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
